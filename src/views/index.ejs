<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WebSocket Chat</title>
    <!--  public folder  -->
    <link rel="stylesheet" href="styles/tailwind.css" />
   
  <body>
    <nav
      class="flex h-10 items-center justify-center space-x-2 bg-green-800 px-8"
    >
      <a href="/login" class="flex text-white"> Sign In </a>
    </nav>

    <div id="chat"></div>
    <input type="text" id="messageInput" placeholder="Type a message..." />
    <button id="sendButton">Send</button>

    <div hx-ws="connect:ws://localhost:3000">
      <div id="chat_room">
        <div hx-get="/chatroom">
          <div hx-swap="outerHTML">
            <div id="chat"></div>
          </div>
        </div>
      </div>

      <form hx-ws="send" hx-post="/chatroom">
        <input
          name="message"
          type="text"
          id="messageInput"
          placeholder="Type a message..."
        />
        <button id="sendButton">Send</button>
      </form>
    </div>

    <script>
      const socket = new WebSocket("ws://localhost:3000");

      socket.addEventListener("open", () => {
        console.log("Connected to WebSocket server");
      });

      socket.addEventListener("message", (event) => {
        event.data.arrayBuffer().then((buffer) => {
          const decoder = new TextDecoder("utf-8");
          const message = decoder.decode(buffer);

          const chatDiv = document.getElementById("chat");
          const messageDiv = document.createElement("div");

          messageDiv.textContent = `Received: ${message}`;

          chatDiv.appendChild(messageDiv);
        });
      });

      document.getElementById("sendButton").addEventListener("click", () => {
        const input = document.getElementById("messageInput");
        const message = input.value.trim() || "";

        const chatDiv = document.getElementById("chat");
        const messageDiv = document.createElement("div");

        messageDiv.textContent = `You: ${message}`;

        chatDiv.appendChild(messageDiv);

        if (message !== "") {
          socket.send(message);
          input.value = "";
        }
      });

      // Event listener for login form submission
      document
        .getElementById("loginForm")
        .addEventListener("submit", (event) => {
          event.preventDefault(); // Prevent form submission
          const username = document
            .getElementById("usernameInput")
            .value.trim();
          const password = document
            .getElementById("passwordInput")
            .value.trim();

          // Send login request to server
          fetch("/login", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ username, password }),
          })
            .then((response) => {
              console.log(response);
              if (response.ok) {
                showChatInterface(); // Show chat interface on successful login
              } else {
                throw new Error("Invalid username or password.");
              }
            })
            .catch((error) => {
              console.log(error);
              document.getElementById("loginError").textContent = error.message;
            });
        });

      // Event listener for register form submission
      document
        .getElementById("registerForm")
        .addEventListener("submit", (event) => {
          event.preventDefault(); // Prevent form submission
          const username = document
            .getElementById("usernameInput")
            .value.trim();
          const password = document
            .getElementById("passwordInput")
            .value.trim();

          const registerUrl = "http://127.0.0.1:3000/register";
          // Send register request to server
          fetch(registerUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ username, password }),
          })
            .then((response) => {
              console.log(response);
              if (response.ok) {
                showChatInterface(); // Show chat interface on successful registration
              } else {
                throw new Error("Username already exists.");
              }
            })
            .catch((error) => {
              console.log(error);
              document.getElementById("registerError").textContent =
                error.message;
            });
        });
    </script>
  </body>
</html>
